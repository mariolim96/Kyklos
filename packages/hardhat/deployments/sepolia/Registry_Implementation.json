{
  "address": "0x876Cd2b50Ff76F9cDb48144Eb769bd85DbE59c76",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "standard",
          "type": "string"
        }
      ],
      "name": "KCO2FactoryAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc20",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "standardRegistry",
          "type": "string"
        }
      ],
      "name": "addERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "carbonOffsetBatchesAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "carbonProjectVintagesAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "carbonProjectsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc20",
          "type": "address"
        }
      ],
      "name": "isValidERC20",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "kyklosCarbonOffsetFactories",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kyklosCarbonOffsetsEscrowAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kyklosCarbonOffsetsFactoryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "standardRegistry",
          "type": "string"
        }
      ],
      "name": "kyklosCarbonOffsetsFactoryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "projectVintageERC20Registry",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retirementCertificatesAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setCarbonOffsetBatchesAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setCarbonProjectVintagesAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setCarbonProjectsAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setRetirementCertificatesAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "1fefe49cf5bfec95ec855ee89ec47523",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"standard\",\"type\":\"string\"}],\"name\":\"KCO2FactoryAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"standardRegistry\",\"type\":\"string\"}],\"name\":\"addERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"carbonOffsetBatchesAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"carbonProjectVintagesAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"carbonProjectsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"}],\"name\":\"isValidERC20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"kyklosCarbonOffsetFactories\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kyklosCarbonOffsetsEscrowAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kyklosCarbonOffsetsFactoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"standardRegistry\",\"type\":\"string\"}],\"name\":\"kyklosCarbonOffsetsFactoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"projectVintageERC20Registry\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retirementCertificatesAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setCarbonOffsetBatchesAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setCarbonProjectVintagesAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setCarbonProjectsAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setRetirementCertificatesAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The KyklosContractRegistry is queried by other contracts for current addresses\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"PAUSER_ROLE\":{\"details\":\"All roles related to accessing this contract\"},\"VERSION\":{\"details\":\"Version-related parameters.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/KyklosRegistry.sol\":\"KyklosContractRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x5addc7dca2366b164c9befa35da22e9081c44bf6c4c8dce4269be43516f8916e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6e36e9b4b71de699c2f3f0d4e4d1aa0b35da99a26e8d5b91ef09ba234b4ef270\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x422c3d27d0d5681cea93acbb0dcb175fa5b461b5b7731da7ff77e51f0f0174c7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/KyklosRegistry.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Kyklos Labs\\r\\n//\\r\\n// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\n// If you encounter a vulnerability or an issue, please contact <security@kyklos.earth> or visit security.kyklos.earth\\r\\npragma solidity 0.8.14;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\n\\r\\nimport \\\"./interfaces/IPausable.sol\\\";\\r\\nimport \\\"./interfaces/IKyklosCarbonOffsetsFactory.sol\\\";\\r\\nimport \\\"./interfaces/IKyklosContractRegistry.sol\\\";\\r\\nimport \\\"./libraries/Strings.sol\\\";\\r\\nimport \\\"./storages/KyklosContractRegistryStorage.sol\\\";\\r\\n\\r\\n/// @dev The KyklosContractRegistry is queried by other contracts for current addresses\\r\\ncontract KyklosContractRegistry is\\r\\n\\tOwnableUpgradeable,\\r\\n\\tAccessControlUpgradeable,\\r\\n\\tIKyklosContractRegistry,\\r\\n\\tUUPSUpgradeable,\\r\\n\\tKyklosContractRegistryStorage\\r\\n{\\r\\n\\tusing Strings for string;\\r\\n\\r\\n\\t// ----------------------------------------\\r\\n\\t//      Constants\\r\\n\\t// ----------------------------------------\\r\\n\\r\\n\\t/// @dev Version-related parameters.\\r\\n\\tstring public constant VERSION = \\\"1.0.0\\\";\\r\\n\\r\\n\\t/// @dev All roles related to accessing this contract\\r\\n\\tbytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\r\\n\\r\\n\\t// ----------------------------------------\\r\\n\\t//      Events\\r\\n\\t// ----------------------------------------\\r\\n\\r\\n\\tevent KCO2FactoryAdded(address indexed factory, string indexed standard);\\r\\n\\r\\n\\t// ----------------------------------------\\r\\n\\t//      Modifiers\\r\\n\\t// ----------------------------------------\\r\\n\\r\\n\\tmodifier onlyBy(address _factory, address _owner) {\\r\\n\\t\\trequire(\\r\\n\\t\\t\\t_factory == msg.sender || _owner == msg.sender,\\r\\n\\t\\t\\t\\\"Caller is not the factory\\\"\\r\\n\\t\\t);\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\t/// @dev modifier that only lets the contract's owner and granted pausers pause the system\\r\\n\\tmodifier onlyPausers() {\\r\\n\\t\\trequire(\\r\\n\\t\\t\\thasRole(PAUSER_ROLE, msg.sender) || owner() == msg.sender,\\r\\n\\t\\t\\t\\\"Caller is not authorized\\\"\\r\\n\\t\\t);\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\t/// @custom:oz-upgrades-unsafe-allow constructor\\r\\n\\tconstructor() {\\r\\n\\t\\t_disableInitializers();\\r\\n\\t}\\r\\n\\r\\n\\t// /// @notice security function that pauses all contracts part of the carbon bridge\\r\\n\\t// function pauseSystem() external onlyPausers {\\r\\n\\t//     IPausable cpv = IPausable(_carbonProjectVintagesAddress);\\r\\n\\t//     if (!cpv.paused()) cpv.pause();\\r\\n\\r\\n\\t//     IPausable cp = IPausable(_carbonProjectsAddress);\\r\\n\\t//     if (!cp.paused()) cp.pause();\\r\\n\\r\\n\\t//     IPausable cob = IPausable(_carbonOffsetBatchesAddress);\\r\\n\\t//     if (!cob.paused()) cob.pause();\\r\\n\\r\\n\\t//     uint256 standardRegistriesLen = standardRegistries.length;\\r\\n\\t//     //slither-disable-next-line uninitialized-local\\r\\n\\t//     for (uint256 i; i < standardRegistriesLen; ) {\\r\\n\\t//         string memory standardRegistry = standardRegistries[i];\\r\\n\\t//         address factory = kyklosCarbonOffsetFactories[standardRegistry];\\r\\n\\r\\n\\t//         IPausable tcof = IPausable(factory);\\r\\n\\t//         if (!tcof.paused()) tcof.pause();\\r\\n\\r\\n\\t//         unchecked {\\r\\n\\t//             ++i;\\r\\n\\t//         }\\r\\n\\t//     }\\r\\n\\t// }\\r\\n\\r\\n\\t// /// @notice security function that unpauses all contracts part of the carbon bridge\\r\\n\\t// function unpauseSystem() external onlyOwner {\\r\\n\\t//     IPausable cpv = IPausable(_carbonProjectVintagesAddress);\\r\\n\\t//     if (cpv.paused()) cpv.unpause();\\r\\n\\r\\n\\t//     IPausable cp = IPausable(_carbonProjectsAddress);\\r\\n\\t//     if (cp.paused()) cp.unpause();\\r\\n\\r\\n\\t//     IPausable cob = IPausable(_carbonOffsetBatchesAddress);\\r\\n\\t//     if (cob.paused()) cob.unpause();\\r\\n\\r\\n\\t//     uint256 standardRegistriesLen = standardRegistries.length;\\r\\n\\t//     //slither-disable-next-line uninitialized-local\\r\\n\\t//     for (uint256 i; i < standardRegistriesLen; ) {\\r\\n\\t//         string memory standardRegistry = standardRegistries[i];\\r\\n\\t//         address factory = kyklosCarbonOffsetFactories[standardRegistry];\\r\\n\\r\\n\\t//         IPausable tcof = IPausable(factory);\\r\\n\\t//         if (tcof.paused()) tcof.unpause();\\r\\n\\r\\n\\t//         unchecked {\\r\\n\\t//             ++i;\\r\\n\\t//         }\\r\\n\\t//     }\\r\\n\\t// }\\r\\n\\r\\n\\t// // ----------------------------------------\\r\\n\\t// //      Upgradable related functions\\r\\n\\t// // ----------------------------------------\\r\\n\\r\\n\\tfunction initialize() external virtual initializer {\\r\\n\\t\\t__Ownable_init();\\r\\n\\t\\t__AccessControl_init_unchained();\\r\\n\\t\\t__UUPSUpgradeable_init_unchained();\\r\\n\\r\\n\\t\\t/// @dev granting the deployer==owner the rights to grant other roles\\r\\n\\t\\t_grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _authorizeUpgrade(\\r\\n\\t\\taddress newImplementation\\r\\n\\t) internal virtual override onlyOwner {}\\r\\n\\r\\n\\t// ----------------------------------------\\r\\n\\t//              Setters\\r\\n\\t// ----------------------------------------\\r\\n\\tfunction setCarbonOffsetBatchesAddress(\\r\\n\\t\\taddress _address\\r\\n\\t) external virtual  {\\r\\n\\t\\trequire(_address != address(0), \\\"Zero address\\\");\\r\\n\\t\\t_carbonOffsetBatchesAddress = _address;\\r\\n\\t}\\r\\n\\r\\n\\tfunction setCarbonProjectsAddress(\\r\\n\\t\\taddress _address\\r\\n\\t) external virtual {\\r\\n\\t\\trequire(_address != address(0), \\\"Zero address\\\");\\r\\n\\t\\t_carbonProjectsAddress = _address;\\r\\n\\t}\\r\\n\\r\\n\\tfunction setCarbonProjectVintagesAddress(\\r\\n\\t\\taddress _address\\r\\n\\t) external virtual  {\\r\\n\\t\\trequire(_address != address(0), \\\"Zero address\\\");\\r\\n\\t\\t_carbonProjectVintagesAddress = _address;\\r\\n\\t}\\r\\n\\r\\n\\t// function setKyklosCarbonOffsetsFactoryAddress(address KCO2Factory)\\r\\n\\t//     external\\r\\n\\t//     virtual\\r\\n\\t//     onlyOwner\\r\\n\\t// {\\r\\n\\t//     require(KCO2Factory != address(0), 'Zero address');\\r\\n\\r\\n\\t//     // Get the standard registry from the factory\\r\\n\\t//     string memory standardRegistry = IKyklosCarbonOffsetsFactory(\\r\\n\\t//         KCO2Factory\\r\\n\\t//     ).standardRegistry();\\r\\n\\t//     require(bytes(standardRegistry).length != 0, 'Empty standard registry');\\r\\n\\r\\n\\t//     if (!standardRegistryExists(standardRegistry)) {\\r\\n\\t//         standardRegistries.push(standardRegistry);\\r\\n\\t//     }\\r\\n\\t//     kyklosCarbonOffsetFactories[standardRegistry] = KCO2Factory;\\r\\n\\r\\n\\t//     emit KCO2FactoryAdded(KCO2Factory, standardRegistry);\\r\\n\\t// }\\r\\n\\r\\n\\t// function standardRegistryExists(string memory standard)\\r\\n\\t//     private\\r\\n\\t//     view\\r\\n\\t//     returns (bool)\\r\\n\\t// {\\r\\n\\t//     uint256 standardRegistriesLen = standardRegistries.length;\\r\\n\\t//     //slither-disable-next-line uninitialized-local\\r\\n\\t//     for (uint256 i; i < standardRegistriesLen; ) {\\r\\n\\t//         if (standardRegistries[i].equals(standard)) {\\r\\n\\t//             return true;\\r\\n\\t//         }\\r\\n\\r\\n\\t//         unchecked {\\r\\n\\t//             ++i;\\r\\n\\t//         }\\r\\n\\t//     }\\r\\n\\t//     return false;\\r\\n\\t// }\\r\\n\\r\\n\\t// function setKyklosCarbonOffsetsEscrowAddress(address _address)\\r\\n\\t//     external\\r\\n\\t//     virtual\\r\\n\\t//     onlyOwner\\r\\n\\t// {\\r\\n\\t//     require(_address != address(0), 'Zero address');\\r\\n\\t//     _kyklosCarbonOffsetsEscrowAddress = _address;\\r\\n\\t// }\\r\\n\\r\\n\\tfunction setRetirementCertificatesAddress(address _address)\\r\\n\\t    external\\r\\n\\t    virtual\\r\\n\\t    onlyOwner\\r\\n\\t{\\r\\n\\t    require(_address != address(0), 'Zero address');\\r\\n\\t    _retirementCertificatesAddress = _address;\\r\\n\\t}\\r\\n\\r\\n\\t// /// Add valid KCO2 contracts for Verra\\r\\n\\t// /// TODO: Kept for backwards-compatibility; will be removed in a future\\r\\n\\t// /// upgrade in favor of addERC20(erc20, 'verra')\\r\\n\\t// function addERC20(address erc20)\\r\\n\\t//     external\\r\\n\\t//     virtual\\r\\n\\t//     onlyBy(DEPRECATED_kyklosCarbonOffsetsFactoryAddress, owner())\\r\\n\\t// {\\r\\n\\t//     projectVintageERC20Registry[erc20] = true;\\r\\n\\t// }\\r\\n\\r\\n\\t// /// @notice Keep track of KCO2s per standard\\r\\n\\t// function addERC20(address erc20, string calldata standardRegistry)\\r\\n\\t//     external\\r\\n\\t//     virtual\\r\\n\\t//     onlyBy(kyklosCarbonOffsetFactories[standardRegistry], owner())\\r\\n\\t// {\\r\\n\\t//     projectVintageERC20Registry[erc20] = true;\\r\\n\\t// }\\r\\n\\r\\n\\t// // ----------------------------------------\\r\\n\\t// //              Getters\\r\\n\\t// // ----------------------------------------\\r\\n\\r\\n\\tfunction carbonOffsetBatchesAddress()\\r\\n\\t\\texternal\\r\\n\\t\\tview\\r\\n\\t\\tvirtual\\r\\n\\t\\toverride\\r\\n\\t\\treturns (address)\\r\\n\\t{\\r\\n\\t\\treturn _carbonOffsetBatchesAddress;\\r\\n\\t}\\r\\n\\r\\n\\tfunction carbonProjectsAddress()\\r\\n\\t\\texternal\\r\\n\\t\\tview\\r\\n\\t\\tvirtual\\r\\n\\t\\toverride\\r\\n\\t\\treturns (address)\\r\\n\\t{\\r\\n\\t\\treturn _carbonProjectsAddress;\\r\\n\\t}\\r\\n\\r\\n\\tfunction carbonProjectVintagesAddress()\\r\\n\\t\\texternal\\r\\n\\t\\tview\\r\\n\\t\\tvirtual\\r\\n\\t\\toverride\\r\\n\\t\\treturns (address)\\r\\n\\t{\\r\\n\\t\\treturn _carbonProjectVintagesAddress;\\r\\n\\t}\\r\\n\\r\\n\\t// /// Returns the KCO2 factory for Verra\\r\\n\\t// /// TODO: Kept for backwards-compatibility; will be removed in a future\\r\\n\\t// /// upgrade in favor of kyklosCarbonOffsetsFactory('verra')\\r\\n\\t// function kyklosCarbonOffsetsFactoryAddress()\\r\\n\\t//     external\\r\\n\\t//     view\\r\\n\\t//     virtual\\r\\n\\t//     override\\r\\n\\t//     returns (address)\\r\\n\\t// {\\r\\n\\t//     return DEPRECATED_kyklosCarbonOffsetsFactoryAddress;\\r\\n\\t// }\\r\\n\\r\\n\\t// /// @dev return the KCO2 factory address for the provided standard\\r\\n\\t// function kyklosCarbonOffsetsFactoryAddress(string memory standardRegistry)\\r\\n\\t//     external\\r\\n\\t//     view\\r\\n\\t//     virtual\\r\\n\\t//     override\\r\\n\\t//     returns (address)\\r\\n\\t// {\\r\\n\\t//     return kyklosCarbonOffsetFactories[standardRegistry];\\r\\n\\t// }\\r\\n\\r\\n\\t// function kyklosCarbonOffsetsEscrowAddress()\\r\\n\\t//     external\\r\\n\\t//     view\\r\\n\\t//     virtual\\r\\n\\t//     override\\r\\n\\t//     returns (address)\\r\\n\\t// {\\r\\n\\t//     return _kyklosCarbonOffsetsEscrowAddress;\\r\\n\\t// }\\r\\n\\r\\n\\t// /// TODO: Remove in a future upgrade now that we have retirementCertificatesAddress\\r\\n\\t// function carbonOffsetBadgesAddress()\\r\\n\\t//     external\\r\\n\\t//     view\\r\\n\\t//     virtual\\r\\n\\t//     returns (address)\\r\\n\\t// {\\r\\n\\t//     return _retirementCertificatesAddress;\\r\\n\\t// }\\r\\n\\r\\n\\t// function retirementCertificatesAddress()\\r\\n\\t//     external\\r\\n\\t//     view\\r\\n\\t//     virtual\\r\\n\\t//     override\\r\\n\\t//     returns (address)\\r\\n\\t// {\\r\\n\\t//     return _retirementCertificatesAddress;\\r\\n\\t// }\\r\\n\\r\\n\\t// /// TODO: Kept for backwards-compatibility; will be removed in a future\\r\\n\\t// /// upgrade in favor of isValidERC20(erc20)\\r\\n\\t// function checkERC20(address erc20) external view virtual returns (bool) {\\r\\n\\t//     return projectVintageERC20Registry[erc20];\\r\\n\\t// }\\r\\n\\r\\n\\t// function isValidERC20(address erc20)\\r\\n\\t//     external\\r\\n\\t//     view\\r\\n\\t//     virtual\\r\\n\\t//     override\\r\\n\\t//     returns (bool)\\r\\n\\t// {\\r\\n\\t//     return projectVintageERC20Registry[erc20];\\r\\n\\t// }\\r\\n\\r\\n\\t// function supportedStandardRegistries()\\r\\n\\t//     external\\r\\n\\t//     view\\r\\n\\t//     returns (string[] memory)\\r\\n\\t// {\\r\\n\\t//     return standardRegistries;\\r\\n\\t// }\\r\\n\\tfunction kyklosCarbonOffsetsFactoryAddress()\\r\\n\\t\\texternal\\r\\n\\t\\tview\\r\\n\\t\\toverride\\r\\n\\t\\treturns (address)\\r\\n\\t{}\\r\\n\\r\\n\\tfunction kyklosCarbonOffsetsFactoryAddress(\\r\\n\\t\\tstring memory standardRegistry\\r\\n\\t) external view override returns (address) {}\\r\\n\\r\\n\\tfunction retirementCertificatesAddress()\\r\\n\\t\\texternal\\r\\n\\t\\tview\\r\\n\\t\\toverride\\r\\n\\t\\treturns (address)\\r\\n\\t{}\\r\\n\\r\\n\\tfunction kyklosCarbonOffsetsEscrowAddress()\\r\\n\\t\\texternal\\r\\n\\t\\tview\\r\\n\\t\\toverride\\r\\n\\t\\treturns (address)\\r\\n\\t{}\\r\\n\\r\\n\\tfunction isValidERC20(\\r\\n\\t\\taddress erc20\\r\\n\\t) external view override returns (bool) {}\\r\\n\\r\\n\\tfunction addERC20(\\r\\n\\t\\taddress erc20,\\r\\n\\t\\tstring memory standardRegistry\\r\\n\\t) external override {}\\r\\n}\\r\\n\",\"keccak256\":\"0x468144ce674b96547cb5951d33af7b86a3749ad7f748741948e2fb46632b32b5\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IKyklosCarbonOffsetsFactory.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2022 Kyklos Labs\\r\\n//\\r\\n// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\n// If you encounter a vulnerability or an issue, please contact <security@kyklos.earth> or visit security.kyklos.earth\\r\\npragma solidity 0.8.14;\\r\\n\\r\\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\\r\\n\\r\\ninterface IKyklosCarbonOffsetsFactory is IAccessControlUpgradeable {\\r\\n    function bridgeFeeReceiverAddress()\\r\\n        external\\r\\n        view\\r\\n        returns (address receiver);\\r\\n\\r\\n    function bridgeFeeBurnAddress() external view returns (address burner);\\r\\n\\r\\n    function getBridgeFeeAndBurnAmount(uint256 quantity)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 feeAmount, uint256 burnAmount);\\r\\n\\r\\n    function allowedBridges(address user) external view returns (bool);\\r\\n\\r\\n    function owner() external view returns (address);\\r\\n\\r\\n    function standardRegistry() external returns (string memory);\\r\\n\\r\\n    function pvIdtoERC20(uint256 pvId) external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0xa54e0dcb45b6c239da8fd64b52e6afea47e568db832958243bc4308a95197bd0\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IKyklosContractRegistry.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Kyklos Labs\\r\\n//\\r\\n// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\n// If you encounter a vulnerability or an issue, please contact <security@kyklos.earth> or visit security.kyklos.earth\\r\\npragma solidity 0.8.14;\\r\\n\\r\\ninterface IKyklosContractRegistry {\\r\\n    function carbonOffsetBatchesAddress() external view returns (address);\\r\\n\\r\\n    function carbonProjectsAddress() external view returns (address);\\r\\n\\r\\n    function carbonProjectVintagesAddress() external view returns (address);\\r\\n\\r\\n    function kyklosCarbonOffsetsFactoryAddress()\\r\\n        external\\r\\n        view\\r\\n        returns (address);\\r\\n\\r\\n    function kyklosCarbonOffsetsFactoryAddress(string memory standardRegistry)\\r\\n        external\\r\\n        view\\r\\n        returns (address);\\r\\n\\r\\n    function retirementCertificatesAddress() external view returns (address);\\r\\n\\r\\n    function kyklosCarbonOffsetsEscrowAddress() external view returns (address);\\r\\n\\r\\n    function isValidERC20(address erc20) external view returns (bool);\\r\\n\\r\\n    function addERC20(address erc20, string memory standardRegistry) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x6e4d5b057c1c3e89ff0cf459ad24dedad0a6ba207d05115c6cc26c6dc67adec9\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IPausable.sol\":{\"content\":\"\\r\\n//\\r\\n// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\n// If you encounter a vulnerability or an issue, please contact <security@kyklos.earth> or visit security.kyklos.earth\\r\\npragma solidity 0.8.14;\\r\\n\\r\\ninterface IPausable {\\r\\n    function paused() external view returns (bool);\\r\\n\\r\\n    function pause() external;\\r\\n\\r\\n    function unpause() external;\\r\\n}\\r\\n\",\"keccak256\":\"0xb027260704a099c0033b7bb8f9b897ff7ebc0a9c37fab8c6524bd6e4e2af8965\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Strings.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2023 Kyklos Labs\\r\\n//\\r\\n// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\n// If you encounter a vulnerability or an issue, please contact <security@kyklos.earth> or visit security.kyklos.earth\\r\\npragma solidity 0.8.14;\\r\\n\\r\\nlibrary Strings {\\r\\n    function equals(string memory a, string memory b)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bool)\\r\\n    {\\r\\n        return\\r\\n            (bytes(a).length == bytes(b).length) &&\\r\\n            (keccak256(bytes(a)) == keccak256(bytes(b)));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xefdf2cd0bc3d623881b4abed95ed9299de2111776a73d85241b20667e2f923e8\",\"license\":\"UNLICENSED\"},\"contracts/storages/KyklosContractRegistryStorage.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Kyklos Labs\\r\\n//\\r\\n// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\n// If you encounter a vulnerability or an issue, please contact <security@kyklos.earth> or visit security.kyklos.earth\\r\\npragma solidity 0.8.14;\\r\\n\\r\\nabstract contract KyklosContractRegistryStorageV1 {\\r\\n    address internal _carbonOffsetBatchesAddress;\\r\\n    address internal _carbonProjectsAddress;\\r\\n    address internal _carbonProjectVintagesAddress;\\r\\n    //slither-disable-next-line uninitialized-state,constable-states\\r\\n    address internal _retirementCertificatesAddress;\\r\\n    mapping(address => bool) public projectVintageERC20Registry;\\r\\n    mapping(string => address) public kyklosCarbonOffsetFactories;\\r\\n    address internal _kyklosCarbonOffsetsEscrowAddress;\\r\\n    string[] internal standardRegistries;\\r\\n}\\r\\n\\r\\n\\r\\nabstract contract KyklosContractRegistryStorage is\\r\\n    KyklosContractRegistryStorageV1\\r\\n{}\\r\\n\",\"keccak256\":\"0x9b9db04c0f1a4a140a8f6d45e3b3fc09bc70e5c20d093bd15bb8aab20b1136de\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a0604052306080523480156200001557600080fd5b506200002062000026565b62000156565b6200003260ff62000035565b50565b60008054610100900460ff1615620000ce578160ff1660011480156200006e57506200006c306200014760201b62000c191760201c565b155b620000c65760405162461bcd60e51b815260206004820152602e602482015260008051602062001b9e83398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b506000919050565b60005460ff8084169116106200012d5760405162461bcd60e51b815260206004820152602e602482015260008051602062001b9e83398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401620000bd565b506000805460ff191660ff92909216919091179055600190565b6001600160a01b03163b151590565b608051611a106200018e6000396000818161071301528181610753015281816107f20152818161083201526108c10152611a106000f3fe6080604052600436106101d85760003560e01c80636989d801116101025780639882006b11610095578063d547741f11610064578063d547741f1461052a578063e63ab1e91461054a578063f2fde38b1461057e578063ffa1ad741461059e57600080fd5b80639882006b146104bb578063a0ad2599146104d6578063a0af2560146104f6578063a217fddf1461051557600080fd5b8063746f62da116100d1578063746f62da146104475780638129fc1c146104685780638da5cb5b1461047d57806391d148541461049b57600080fd5b80636989d801146103f25780636cd8f78e14610298578063715018a61461041257806371b15b1c1461042757600080fd5b8063344dd6cb1161017a5780634be4e3dd116101495780634be4e3dd146103695780634f1ef2861461038857806352d1902d1461039b578063589a9ae5146103b057600080fd5b8063344dd6cb1461030a57806336568abe146103295780633659cfe614610349578063376b5dce1461029857600080fd5b80631cf743db116101b65780631cf743db146102675780631fd0699a14610298578063248a9ca3146102ac5780632f2ff15d146102ea57600080fd5b806301157a83146101dd57806301f07b2f1461021557806301ffc9a714610237575b600080fd5b3480156101e957600080fd5b5061012e546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b34801561022157600080fd5b5061023561023036600461146b565b6105dc565b005b34801561024357600080fd5b50610257610252366004611486565b61062e565b604051901515815260200161020c565b34801561027357600080fd5b5061025761028236600461146b565b6101316020526000908152604090205460ff1681565b3480156102a457600080fd5b5060006101f8565b3480156102b857600080fd5b506102dc6102c73660046114b0565b60009081526097602052604090206001015490565b60405190815260200161020c565b3480156102f657600080fd5b506102356103053660046114c9565b610665565b34801561031657600080fd5b506102356103253660046115a1565b5050565b34801561033557600080fd5b506102356103443660046114c9565b61068f565b34801561035557600080fd5b5061023561036436600461146b565b610709565b34801561037557600080fd5b5061012d546001600160a01b03166101f8565b6102356103963660046115ef565b6107e8565b3480156103a757600080fd5b506102dc6108b4565b3480156103bc57600080fd5b506101f86103cb366004611647565b8051602081830181018051610132825292820191909301209152546001600160a01b031681565b3480156103fe57600080fd5b5061023561040d36600461146b565b610967565b34801561041e57600080fd5b506102356109b0565b34801561043357600080fd5b5061023561044236600461146b565b6109e6565b34801561045357600080fd5b5061025761046236600461146b565b50600090565b34801561047457600080fd5b50610235610a59565b34801561048957600080fd5b506033546001600160a01b03166101f8565b3480156104a757600080fd5b506102576104b63660046114c9565b610ae8565b3480156104c757600080fd5b506101f8610462366004611647565b3480156104e257600080fd5b506102356104f136600461146b565b610b13565b34801561050257600080fd5b5061012f546001600160a01b03166101f8565b34801561052157600080fd5b506102dc600081565b34801561053657600080fd5b506102356105453660046114c9565b610b5c565b34801561055657600080fd5b506102dc7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b34801561058a57600080fd5b5061023561059936600461146b565b610b81565b3480156105aa57600080fd5b506105cf604051806040016040528060058152602001640312e302e360dc1b81525081565b60405161020c91906116b0565b6001600160a01b03811661060b5760405162461bcd60e51b8152600401610602906116e3565b60405180910390fd5b61012f80546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160e01b03198216637965db0b60e01b148061065f57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60008281526097602052604090206001015461068081610c28565b61068a8383610c32565b505050565b6001600160a01b03811633146106ff5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610602565b6103258282610cb8565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036107515760405162461bcd60e51b815260040161060290611709565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661079a600080516020611994833981519152546001600160a01b031690565b6001600160a01b0316146107c05760405162461bcd60e51b815260040161060290611755565b6107c981610d1f565b604080516000808252602082019092526107e591839190610d49565b50565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036108305760405162461bcd60e51b815260040161060290611709565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610879600080516020611994833981519152546001600160a01b031690565b6001600160a01b03161461089f5760405162461bcd60e51b815260040161060290611755565b6108a882610d1f565b61032582826001610d49565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109545760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610602565b5060008051602061199483398151915290565b6001600160a01b03811661098d5760405162461bcd60e51b8152600401610602906116e3565b61012d80546001600160a01b0319166001600160a01b0392909216919091179055565b6033546001600160a01b031633146109da5760405162461bcd60e51b8152600401610602906117a1565b6109e46000610eb4565b565b6033546001600160a01b03163314610a105760405162461bcd60e51b8152600401610602906117a1565b6001600160a01b038116610a365760405162461bcd60e51b8152600401610602906116e3565b61013080546001600160a01b0319166001600160a01b0392909216919091179055565b6000610a656001610f06565b90508015610a7d576000805461ff0019166101001790555b610a85610f93565b610a8d610fc2565b610a95610fc2565b610aa0600033610c32565b80156107e5576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150565b60009182526097602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6001600160a01b038116610b395760405162461bcd60e51b8152600401610602906116e3565b61012e80546001600160a01b0319166001600160a01b0392909216919091179055565b600082815260976020526040902060010154610b7781610c28565b61068a8383610cb8565b6033546001600160a01b03163314610bab5760405162461bcd60e51b8152600401610602906117a1565b6001600160a01b038116610c105760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610602565b6107e581610eb4565b6001600160a01b03163b151590565b6107e58133610fe9565b610c3c8282610ae8565b6103255760008281526097602090815260408083206001600160a01b03851684529091529020805460ff19166001179055610c743390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610cc28282610ae8565b156103255760008281526097602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6033546001600160a01b031633146107e55760405162461bcd60e51b8152600401610602906117a1565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610d7c5761068a8361104d565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610dd6575060408051601f3d908101601f19168201909252610dd3918101906117d6565b60015b610e395760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610602565b6000805160206119948339815191528114610ea85760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610602565b5061068a8383836110e9565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008054610100900460ff1615610f4d578160ff166001148015610f295750303b155b610f455760405162461bcd60e51b8152600401610602906117ef565b506000919050565b60005460ff808416911610610f745760405162461bcd60e51b8152600401610602906117ef565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff16610fba5760405162461bcd60e51b81526004016106029061183d565b6109e4611114565b600054610100900460ff166109e45760405162461bcd60e51b81526004016106029061183d565b610ff38282610ae8565b6103255761100b816001600160a01b03166014611144565b611016836020611144565b604051602001611027929190611888565b60408051601f198184030181529082905262461bcd60e51b8252610602916004016116b0565b6001600160a01b0381163b6110ba5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610602565b60008051602061199483398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6110f2836112e7565b6000825111806110ff5750805b1561068a5761110e8383611327565b50505050565b600054610100900460ff1661113b5760405162461bcd60e51b81526004016106029061183d565b6109e433610eb4565b60606000611153836002611913565b61115e906002611932565b67ffffffffffffffff811115611176576111766114f5565b6040519080825280601f01601f1916602001820160405280156111a0576020820181803683370190505b509050600360fc1b816000815181106111bb576111bb61194a565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106111ea576111ea61194a565b60200101906001600160f81b031916908160001a905350600061120e846002611913565b611219906001611932565b90505b6001811115611291576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061124d5761124d61194a565b1a60f81b8282815181106112635761126361194a565b60200101906001600160f81b031916908160001a90535060049490941c9361128a81611960565b905061121c565b5083156112e05760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610602565b9392505050565b6112f08161104d565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b61138f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610602565b600080846001600160a01b0316846040516113aa9190611977565b600060405180830381855af49150503d80600081146113e5576040519150601f19603f3d011682016040523d82523d6000602084013e6113ea565b606091505b509150915061141282826040518060600160405280602781526020016119b46027913961141b565b95945050505050565b6060831561142a5750816112e0565b82511561143a5782518084602001fd5b8160405162461bcd60e51b815260040161060291906116b0565b80356001600160a01b0381168114610f8e57600080fd5b60006020828403121561147d57600080fd5b6112e082611454565b60006020828403121561149857600080fd5b81356001600160e01b0319811681146112e057600080fd5b6000602082840312156114c257600080fd5b5035919050565b600080604083850312156114dc57600080fd5b823591506114ec60208401611454565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115611526576115266114f5565b604051601f8501601f19908116603f0116810190828211818310171561154e5761154e6114f5565b8160405280935085815286868601111561156757600080fd5b858560208301376000602087830101525050509392505050565b600082601f83011261159257600080fd5b6112e08383356020850161150b565b600080604083850312156115b457600080fd5b6115bd83611454565b9150602083013567ffffffffffffffff8111156115d957600080fd5b6115e585828601611581565b9150509250929050565b6000806040838503121561160257600080fd5b61160b83611454565b9150602083013567ffffffffffffffff81111561162757600080fd5b8301601f8101851361163857600080fd5b6115e58582356020840161150b565b60006020828403121561165957600080fd5b813567ffffffffffffffff81111561167057600080fd5b61167c84828501611581565b949350505050565b60005b8381101561169f578181015183820152602001611687565b8381111561110e5750506000910152565b60208152600082518060208401526116cf816040850160208701611684565b601f01601f19169190910160400192915050565b6020808252600c908201526b5a65726f206164647265737360a01b604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000602082840312156117e857600080fd5b5051919050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516118c0816017850160208801611684565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516118f1816028840160208801611684565b01602801949350505050565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561192d5761192d6118fd565b500290565b60008219821115611945576119456118fd565b500190565b634e487b7160e01b600052603260045260246000fd5b60008161196f5761196f6118fd565b506000190190565b60008251611989818460208701611684565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220f4d51a1532f2eb3d7373d95258c0c6df0d0c53dfb15568053bd9e3dde8669ae064736f6c634300080e0033496e697469616c697a61626c653a20636f6e747261637420697320616c726561",
  "deployedBytecode": "0x6080604052600436106101d85760003560e01c80636989d801116101025780639882006b11610095578063d547741f11610064578063d547741f1461052a578063e63ab1e91461054a578063f2fde38b1461057e578063ffa1ad741461059e57600080fd5b80639882006b146104bb578063a0ad2599146104d6578063a0af2560146104f6578063a217fddf1461051557600080fd5b8063746f62da116100d1578063746f62da146104475780638129fc1c146104685780638da5cb5b1461047d57806391d148541461049b57600080fd5b80636989d801146103f25780636cd8f78e14610298578063715018a61461041257806371b15b1c1461042757600080fd5b8063344dd6cb1161017a5780634be4e3dd116101495780634be4e3dd146103695780634f1ef2861461038857806352d1902d1461039b578063589a9ae5146103b057600080fd5b8063344dd6cb1461030a57806336568abe146103295780633659cfe614610349578063376b5dce1461029857600080fd5b80631cf743db116101b65780631cf743db146102675780631fd0699a14610298578063248a9ca3146102ac5780632f2ff15d146102ea57600080fd5b806301157a83146101dd57806301f07b2f1461021557806301ffc9a714610237575b600080fd5b3480156101e957600080fd5b5061012e546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b34801561022157600080fd5b5061023561023036600461146b565b6105dc565b005b34801561024357600080fd5b50610257610252366004611486565b61062e565b604051901515815260200161020c565b34801561027357600080fd5b5061025761028236600461146b565b6101316020526000908152604090205460ff1681565b3480156102a457600080fd5b5060006101f8565b3480156102b857600080fd5b506102dc6102c73660046114b0565b60009081526097602052604090206001015490565b60405190815260200161020c565b3480156102f657600080fd5b506102356103053660046114c9565b610665565b34801561031657600080fd5b506102356103253660046115a1565b5050565b34801561033557600080fd5b506102356103443660046114c9565b61068f565b34801561035557600080fd5b5061023561036436600461146b565b610709565b34801561037557600080fd5b5061012d546001600160a01b03166101f8565b6102356103963660046115ef565b6107e8565b3480156103a757600080fd5b506102dc6108b4565b3480156103bc57600080fd5b506101f86103cb366004611647565b8051602081830181018051610132825292820191909301209152546001600160a01b031681565b3480156103fe57600080fd5b5061023561040d36600461146b565b610967565b34801561041e57600080fd5b506102356109b0565b34801561043357600080fd5b5061023561044236600461146b565b6109e6565b34801561045357600080fd5b5061025761046236600461146b565b50600090565b34801561047457600080fd5b50610235610a59565b34801561048957600080fd5b506033546001600160a01b03166101f8565b3480156104a757600080fd5b506102576104b63660046114c9565b610ae8565b3480156104c757600080fd5b506101f8610462366004611647565b3480156104e257600080fd5b506102356104f136600461146b565b610b13565b34801561050257600080fd5b5061012f546001600160a01b03166101f8565b34801561052157600080fd5b506102dc600081565b34801561053657600080fd5b506102356105453660046114c9565b610b5c565b34801561055657600080fd5b506102dc7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b34801561058a57600080fd5b5061023561059936600461146b565b610b81565b3480156105aa57600080fd5b506105cf604051806040016040528060058152602001640312e302e360dc1b81525081565b60405161020c91906116b0565b6001600160a01b03811661060b5760405162461bcd60e51b8152600401610602906116e3565b60405180910390fd5b61012f80546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160e01b03198216637965db0b60e01b148061065f57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60008281526097602052604090206001015461068081610c28565b61068a8383610c32565b505050565b6001600160a01b03811633146106ff5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610602565b6103258282610cb8565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036107515760405162461bcd60e51b815260040161060290611709565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661079a600080516020611994833981519152546001600160a01b031690565b6001600160a01b0316146107c05760405162461bcd60e51b815260040161060290611755565b6107c981610d1f565b604080516000808252602082019092526107e591839190610d49565b50565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036108305760405162461bcd60e51b815260040161060290611709565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610879600080516020611994833981519152546001600160a01b031690565b6001600160a01b03161461089f5760405162461bcd60e51b815260040161060290611755565b6108a882610d1f565b61032582826001610d49565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109545760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610602565b5060008051602061199483398151915290565b6001600160a01b03811661098d5760405162461bcd60e51b8152600401610602906116e3565b61012d80546001600160a01b0319166001600160a01b0392909216919091179055565b6033546001600160a01b031633146109da5760405162461bcd60e51b8152600401610602906117a1565b6109e46000610eb4565b565b6033546001600160a01b03163314610a105760405162461bcd60e51b8152600401610602906117a1565b6001600160a01b038116610a365760405162461bcd60e51b8152600401610602906116e3565b61013080546001600160a01b0319166001600160a01b0392909216919091179055565b6000610a656001610f06565b90508015610a7d576000805461ff0019166101001790555b610a85610f93565b610a8d610fc2565b610a95610fc2565b610aa0600033610c32565b80156107e5576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150565b60009182526097602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6001600160a01b038116610b395760405162461bcd60e51b8152600401610602906116e3565b61012e80546001600160a01b0319166001600160a01b0392909216919091179055565b600082815260976020526040902060010154610b7781610c28565b61068a8383610cb8565b6033546001600160a01b03163314610bab5760405162461bcd60e51b8152600401610602906117a1565b6001600160a01b038116610c105760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610602565b6107e581610eb4565b6001600160a01b03163b151590565b6107e58133610fe9565b610c3c8282610ae8565b6103255760008281526097602090815260408083206001600160a01b03851684529091529020805460ff19166001179055610c743390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610cc28282610ae8565b156103255760008281526097602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6033546001600160a01b031633146107e55760405162461bcd60e51b8152600401610602906117a1565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610d7c5761068a8361104d565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610dd6575060408051601f3d908101601f19168201909252610dd3918101906117d6565b60015b610e395760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610602565b6000805160206119948339815191528114610ea85760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610602565b5061068a8383836110e9565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008054610100900460ff1615610f4d578160ff166001148015610f295750303b155b610f455760405162461bcd60e51b8152600401610602906117ef565b506000919050565b60005460ff808416911610610f745760405162461bcd60e51b8152600401610602906117ef565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff16610fba5760405162461bcd60e51b81526004016106029061183d565b6109e4611114565b600054610100900460ff166109e45760405162461bcd60e51b81526004016106029061183d565b610ff38282610ae8565b6103255761100b816001600160a01b03166014611144565b611016836020611144565b604051602001611027929190611888565b60408051601f198184030181529082905262461bcd60e51b8252610602916004016116b0565b6001600160a01b0381163b6110ba5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610602565b60008051602061199483398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6110f2836112e7565b6000825111806110ff5750805b1561068a5761110e8383611327565b50505050565b600054610100900460ff1661113b5760405162461bcd60e51b81526004016106029061183d565b6109e433610eb4565b60606000611153836002611913565b61115e906002611932565b67ffffffffffffffff811115611176576111766114f5565b6040519080825280601f01601f1916602001820160405280156111a0576020820181803683370190505b509050600360fc1b816000815181106111bb576111bb61194a565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106111ea576111ea61194a565b60200101906001600160f81b031916908160001a905350600061120e846002611913565b611219906001611932565b90505b6001811115611291576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061124d5761124d61194a565b1a60f81b8282815181106112635761126361194a565b60200101906001600160f81b031916908160001a90535060049490941c9361128a81611960565b905061121c565b5083156112e05760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610602565b9392505050565b6112f08161104d565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b61138f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610602565b600080846001600160a01b0316846040516113aa9190611977565b600060405180830381855af49150503d80600081146113e5576040519150601f19603f3d011682016040523d82523d6000602084013e6113ea565b606091505b509150915061141282826040518060600160405280602781526020016119b46027913961141b565b95945050505050565b6060831561142a5750816112e0565b82511561143a5782518084602001fd5b8160405162461bcd60e51b815260040161060291906116b0565b80356001600160a01b0381168114610f8e57600080fd5b60006020828403121561147d57600080fd5b6112e082611454565b60006020828403121561149857600080fd5b81356001600160e01b0319811681146112e057600080fd5b6000602082840312156114c257600080fd5b5035919050565b600080604083850312156114dc57600080fd5b823591506114ec60208401611454565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115611526576115266114f5565b604051601f8501601f19908116603f0116810190828211818310171561154e5761154e6114f5565b8160405280935085815286868601111561156757600080fd5b858560208301376000602087830101525050509392505050565b600082601f83011261159257600080fd5b6112e08383356020850161150b565b600080604083850312156115b457600080fd5b6115bd83611454565b9150602083013567ffffffffffffffff8111156115d957600080fd5b6115e585828601611581565b9150509250929050565b6000806040838503121561160257600080fd5b61160b83611454565b9150602083013567ffffffffffffffff81111561162757600080fd5b8301601f8101851361163857600080fd5b6115e58582356020840161150b565b60006020828403121561165957600080fd5b813567ffffffffffffffff81111561167057600080fd5b61167c84828501611581565b949350505050565b60005b8381101561169f578181015183820152602001611687565b8381111561110e5750506000910152565b60208152600082518060208401526116cf816040850160208701611684565b601f01601f19169190910160400192915050565b6020808252600c908201526b5a65726f206164647265737360a01b604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000602082840312156117e857600080fd5b5051919050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516118c0816017850160208801611684565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516118f1816028840160208801611684565b01602801949350505050565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561192d5761192d6118fd565b500290565b60008219821115611945576119456118fd565b500190565b634e487b7160e01b600052603260045260246000fd5b60008161196f5761196f6118fd565b506000190190565b60008251611989818460208701611684565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220f4d51a1532f2eb3d7373d95258c0c6df0d0c53dfb15568053bd9e3dde8669ae064736f6c634300080e0033",
  "devdoc": {
    "details": "The KyklosContractRegistry is queried by other contracts for current addresses",
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "stateVariables": {
      "PAUSER_ROLE": {
        "details": "All roles related to accessing this contract"
      },
      "VERSION": {
        "details": "Version-related parameters."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 932,
        "contract": "contracts/KyklosRegistry.sol:KyklosContractRegistry",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 935,
        "contract": "contracts/KyklosRegistry.sol:KyklosContractRegistry",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2650,
        "contract": "contracts/KyklosRegistry.sol:KyklosContractRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 423,
        "contract": "contracts/KyklosRegistry.sol:KyklosContractRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 535,
        "contract": "contracts/KyklosRegistry.sol:KyklosContractRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2957,
        "contract": "contracts/KyklosRegistry.sol:KyklosContractRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 39,
        "contract": "contracts/KyklosRegistry.sol:KyklosContractRegistry",
        "label": "_roles",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 338,
        "contract": "contracts/KyklosRegistry.sol:KyklosContractRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 914,
        "contract": "contracts/KyklosRegistry.sol:KyklosContractRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1202,
        "contract": "contracts/KyklosRegistry.sol:KyklosContractRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "251",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5094,
        "contract": "contracts/KyklosRegistry.sol:KyklosContractRegistry",
        "label": "_carbonOffsetBatchesAddress",
        "offset": 0,
        "slot": "301",
        "type": "t_address"
      },
      {
        "astId": 5096,
        "contract": "contracts/KyklosRegistry.sol:KyklosContractRegistry",
        "label": "_carbonProjectsAddress",
        "offset": 0,
        "slot": "302",
        "type": "t_address"
      },
      {
        "astId": 5098,
        "contract": "contracts/KyklosRegistry.sol:KyklosContractRegistry",
        "label": "_carbonProjectVintagesAddress",
        "offset": 0,
        "slot": "303",
        "type": "t_address"
      },
      {
        "astId": 5100,
        "contract": "contracts/KyklosRegistry.sol:KyklosContractRegistry",
        "label": "_retirementCertificatesAddress",
        "offset": 0,
        "slot": "304",
        "type": "t_address"
      },
      {
        "astId": 5104,
        "contract": "contracts/KyklosRegistry.sol:KyklosContractRegistry",
        "label": "projectVintageERC20Registry",
        "offset": 0,
        "slot": "305",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5108,
        "contract": "contracts/KyklosRegistry.sol:KyklosContractRegistry",
        "label": "kyklosCarbonOffsetFactories",
        "offset": 0,
        "slot": "306",
        "type": "t_mapping(t_string_memory_ptr,t_address)"
      },
      {
        "astId": 5110,
        "contract": "contracts/KyklosRegistry.sol:KyklosContractRegistry",
        "label": "_kyklosCarbonOffsetsEscrowAddress",
        "offset": 0,
        "slot": "307",
        "type": "t_address"
      },
      {
        "astId": 5113,
        "contract": "contracts/KyklosRegistry.sol:KyklosContractRegistry",
        "label": "standardRegistries",
        "offset": 0,
        "slot": "308",
        "type": "t_array(t_string_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_mapping(t_string_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "contracts/KyklosRegistry.sol:KyklosContractRegistry",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "contracts/KyklosRegistry.sol:KyklosContractRegistry",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}