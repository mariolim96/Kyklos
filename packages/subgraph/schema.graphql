type User @entity {
  id: ID!
  batchesOwned: [BatchToken!]! @derivedFrom(field: "owner")
  batchesCreated: [BatchToken!]! @derivedFrom(field: "creator")
  projectsOwned: [Project!]! @derivedFrom(field: "owner")
  projectsCreated: [Project!]! @derivedFrom(field: "creator")
  vintagesOwned: [ProjectVintage!]! @derivedFrom(field: "owner")
  vintagesCreated: [ProjectVintage!]! @derivedFrom(field: "creator")
  retirementsCreated: [Retirement!]! @derivedFrom(field: "creator")
  redeemsCreated: [Redeem!]! @derivedFrom(field: "creator")
  tokensOwned: [TCO2Balance!]! @derivedFrom(field: "user")
  bridgeRequestOwned: [BridgeTokenRequest!]! @derivedFrom(field: "creator")
}

type Project @entity {
  id: ID!
  creator: User!
  owner: User!
  timestamp: BigInt!
  tx: String
  projectId: String!
  vintages: [ProjectVintage!]! @derivedFrom(field: "project")
  standard: String!
  methodology: String!
  region: String!
  storageMethod: String!
  method: String!
  emissionType: String!
  category: String!
  uri: String!
}

type ProjectVintage @entity {
  id: ID!
  creator: User!
  owner: User!
  timestamp: BigInt!
  tx: String!
  name: String!
  startTime: BigInt!
  endTime: BigInt!
  project: Project
  batches: [BatchToken!]! @derivedFrom(field: "vintage")
  totalVintageQuantity: BigInt!
  isCorsiaCompliant: Boolean!
  isCCCompliant: Boolean!
  coBenefits: String!
  corresAdjustment: String!
  additionalCertification: String!
  tco2Token: TCO2Token
}

type BatchToken @entity {
  id: ID!
  creator: User!
  owner: User!
  timestamp: BigInt!
  vintage: ProjectVintage!
  status: String!
  timestamp: BigInt!
  tx: String!
}

type TCO2Token @entity {
  id: ID!
  creator: User!
  createdAt: BigInt!
  creationTx: String!
  projectVintage: ProjectVintage!
  name: String!
  symbol: String!
  address: String!
  score: BigInt!
  retirements: [Retirement!]! @derivedFrom(field: "token")
}

type TCO2Balance @entity {
  id: ID!
  user: User!
  token: TCO2Token!
  balance: BigInt!
}

type PooledTCO2Token @entity {
  id: ID!
  token: TCO2Token!
  poolAddress: String!
  amount: BigInt!
}

type Retirement @entity {
  id: ID!
  creationTx: String!
  amount: BigInt!
  timestamp: BigInt!
  token: TCO2Token!
  creator: User!
  eventId: BigInt!
  certificate: RetirementCertificate!
}

type RetirementCertificate @entity {
  id: ID!
  creationTx: String!
  updateTxs: [String!]!
  createdAt: BigInt!
  retiringEntity: User!
  beneficiary: User!
  retiringEntityString: String!
  beneficiaryString: String!
  retirementMessage: String!
  retirements: [Retirement!]! @derivedFrom(field: "certificate")
}

type Deposit @entity {
  id: ID!
  amount: BigInt!
  timestamp: BigInt!
  token: TCO2Token!
  pool: String!
  creator: User!
}

type Redeem @entity {
  id: ID!
  amount: BigInt!
  timestamp: BigInt!
  token: TCO2Token!
  pool: String!
  creator: User!
}
type PooledTCO2Token @entity {
  id: ID!
  token: TCO2Token!
  poolAddress: String!
  amount: BigInt!
}