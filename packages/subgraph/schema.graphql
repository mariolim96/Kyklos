
type User @entity {
  id: ID!
  # batchesOwned: [BatchToken!]!
  # batchesCreated: [BatchToken!]!
  # batchComments: [BatchComment!]!
  projectsOwned: [Project!]! @derivedFrom(field: "owner")
  projectsCreated: [Project!]! @derivedFrom(field: "creator")
}
type Project @entity {
  id: ID!
  creator: User!
  owner: User!
  timestamp: BigInt!
  tx: String
  projectId: String!
  vintages: [ProjectVintage!]! @derivedFrom(field: "project")
  standard: String!
  methodology: String!
  region: String!
  storageMethod: String!
  method: String!
  emissionType: String!
  category: String!
  uri: String!
}

type ProjectVintage @entity {
  id: ID!
  creator: User!
  owner: User!
  timestamp: BigInt!
  tx: String!
  name: String!
  startTime: BigInt!
  endTime: BigInt!
  project: Project
#   batches: [BatchToken!]!
  totalVintageQuantity: BigInt!
  isCorsiaCompliant: Boolean!
  isCCCompliant: Boolean!
  coBenefits: String!
  corresAdjustment: String!
  additionalCertification: String!
#   tco2Token: TCO2Token
}
# struct VintageData {
#     /// @dev A human-readable string which differentiates this from other vintages in
#     /// the same project, and helps build the corresponding TCO2 name and symbol.
#     string name;
#     uint64 startTime; // UNIX timestamp
#     uint64 endTime; // UNIX timestamp
#     uint256 projectTokenId;
#     uint64 totalVintageQuantity;
#     bool isCorsiaCompliant;
#     bool isCCPcompliant;
#     string coBenefits;
#     string correspAdjustment;
#     string additionalCertification;
#     string uri;
#     string registry;
# }